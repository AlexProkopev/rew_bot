# telegram_reviews_bot/handlers/show_reviews.py
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import ADMIN_ID
import database as db


router = Router()

async def format_review_message(review):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º."""
    text = f"–û—Ç–∑—ã–≤ –æ—Ç: @{review['username'] or '–∞–Ω–æ–Ω–∏–º'}\n\n{review['text']}"
    return text

@router.message(F.text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
async def show_reviews_cmd(message: Message, bot: Bot):
    await show_reviews_page(message, bot, offset=0)

async def show_reviews_page(message_or_callback, bot: Bot, offset: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ç–∑—ã–≤–∞–º–∏."""
    reviews = await db.get_approved_reviews(offset=offset, limit=5)
    total_reviews = await db.count_approved_reviews()

    if not reviews:
        await message_or_callback.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞.")
        return

    builder = InlineKeyboardBuilder()
    
    for idx, review in enumerate(reviews, start=1+offset):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –∞ –Ω–µ id –∏–∑ –±–∞–∑—ã
        button_text = f"–û—Ç–∑—ã–≤ ‚Ññ{idx} –æ—Ç @{review['username'] or '–∞–Ω–æ–Ω–∏–º'}"
        builder.button(text=button_text, callback_data=f"view_review_{review['id']}")

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if offset > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"reviews_page_{offset - 5}")
    if offset + 5 < total_reviews:
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"reviews_page_{offset + 5}")
    
    builder.adjust(1) # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:", reply_markup=builder.as_markup())
    elif isinstance(message_or_callback, CallbackQuery):
        msg = message_or_callback.message
        if msg.content_type == 'photo':
            from aiogram.types import InputMediaPhoto
            # –ü—É—Å—Ç–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º (Telegram —Ç—Ä–µ–±—É–µ—Ç media, –∏–Ω–∞—á–µ –æ—à–∏–±–∫–∞)
            await msg.edit_media(
                media=InputMediaPhoto(media="https://dummyimage.com/1x1/ffffff/ffffff", caption="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:"),
                reply_markup=builder.as_markup()
            )
        else:
            await msg.edit_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("reviews_page_"))
async def paginate_reviews(callback: CallbackQuery, bot: Bot):
    offset = int(callback.data.split("_")[2])
    await show_reviews_page(callback, bot, offset)
    await callback.answer()

@router.callback_query(F.data.startswith("view_review_"))
async def view_single_review(callback: CallbackQuery, bot: Bot):
    review_id = int(callback.data.split("_")[2])
    review = await db.get_review(review_id)

    if not review:
        await callback.answer("–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    text = await format_review_message(review)
    keyboard = []
    if review['photo_id']:
        keyboard.append([InlineKeyboardButton(text="üñºÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ", callback_data=f"show_photo_{review_id}")])
    if callback.from_user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_review_{review_id}")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="reviews_page_0")])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ edit_media
    if callback.message.content_type == 'photo':
        from aiogram.types import InputMediaPhoto
        # –ü—É—Å—Ç–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º (Telegram —Ç—Ä–µ–±—É–µ—Ç media, –∏–Ω–∞—á–µ –æ—à–∏–±–∫–∞)
        await callback.message.edit_media(
            media=InputMediaPhoto(media="https://dummyimage.com/1x1/ffffff/ffffff", caption=text),
            reply_markup=reply_markup
        )
    else:
        await callback.message.edit_text(text, reply_markup=reply_markup)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ---
@router.callback_query(F.data.startswith("delete_review_"))
async def delete_review_from_view(callback: CallbackQuery, bot: Bot):
    review_id = int(callback.data.split("_")[2])
    await db.delete_review(review_id)
    await callback.message.edit_text(f"üóëÔ∏è –û—Ç–∑—ã–≤ #{review_id} —É–¥–∞–ª—ë–Ω.")
    await callback.answer("–û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω.", show_alert=True)

@router.callback_query(F.data.startswith("show_photo_"))
async def show_review_photo(callback: CallbackQuery, bot: Bot):
    review_id = int(callback.data.split("_")[2])
    review = await db.get_review(review_id)

    if not review or not review['photo_id']:
        await callback.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    text = await format_review_message(review)
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ç–æ
    hide_button = InlineKeyboardButton(text="üôà –°–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ", callback_data=f"hide_photo_{review_id}")
    back_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="reviews_page_0")
    reply_markup = InlineKeyboardMarkup(inline_keyboard=[[hide_button], [back_button]])

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ, –±–ª—é—Ä–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ BufferedInputFile
    from aiogram.types import BufferedInputFile
    import io
    from PIL import Image, ImageFilter
    photo_file = await bot.get_file(review['photo_id'])
    photo_bytes = await bot.download_file(photo_file.file_path)
    img = Image.open(photo_bytes)
    blurred_img = img.filter(ImageFilter.GaussianBlur(15))
    blurred_photo_stream = io.BytesIO()
    blurred_img.save(blurred_photo_stream, format='JPEG')
    blurred_photo_stream.seek(0)
    input_file = BufferedInputFile(blurred_photo_stream.read(), filename="blurred.jpg")
    from aiogram.types import InputMediaPhoto
    await callback.message.edit_media(
        media=InputMediaPhoto(media=input_file, caption=text),
        reply_markup=reply_markup
    )
    await callback.answer()

@router.callback_query(F.data.startswith("hide_photo_"))
async def hide_review_photo(callback: CallbackQuery, bot: Bot):
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ñ–æ—Ç–æ, Telegram –Ω–µ –¥–∞—Å—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç, –ø–æ—ç—Ç–æ–º—É –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ "–ø—É—Å—Ç—É—é" –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º
    await view_single_review(callback, bot)
    await callback.answer()
