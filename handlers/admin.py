# telegram_reviews_bot/handlers/admin.py
import asyncio
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Filter
import database as db
from config import ADMIN_ID

# --- –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ ---
class AdminFilter(Filter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id == ADMIN_ID

router = Router()
router.message.filter(AdminFilter()) # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM ---
class AdminState(StatesGroup):
    # –†–∞—Å—Å—ã–ª–∫–∞
    mailing_message = State()
    mailing_confirmation = State()
    # –®–∞–±–ª–æ–Ω—ã
    template_name = State()
    template_text = State()
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_search_query = State()
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    message_to_user_text = State()
    
# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ ---
@router.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    kb = [
        [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
        [KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")],
        [KeyboardButton(text="üìù –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=keyboard)

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    from handlers.start import cmd_start # –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    await cmd_start(message)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ ---

# --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º ---
def get_admin_review_keyboard(review_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve_{review_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{review_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_{review_id}")]
    ])

@router.callback_query(F.data.startswith("admin_approve_"))
async def approve_review(callback: CallbackQuery, bot: Bot):
    review_id = int(callback.data.split("_")[2])
    review = await db.get_review(review_id)
    if not review:
        await callback.message.edit_text("–û—Ç–∑—ã–≤ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        await callback.answer()
        return

    await db.update_review_status(review_id, "approved")
    if callback.message.content_type == "photo":
        await callback.message.edit_caption(f"‚úÖ –û—Ç–∑—ã–≤ #{review_id} –æ–¥–æ–±—Ä–µ–Ω.")
    else:
        await callback.message.edit_text(f"‚úÖ –û—Ç–∑—ã–≤ #{review_id} –æ–¥–æ–±—Ä–µ–Ω.")
    try:
        await bot.send_message(review['user_id'], "–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {review['user_id']}: {e}")
    await callback.answer()

@router.callback_query(F.data.startswith("admin_delete_"))
async def delete_review_callback(callback: CallbackQuery, bot: Bot):
    review_id = int(callback.data.split("_")[2])
    await db.delete_review(review_id)
    await callback.message.edit_text(f"üóëÔ∏è –û—Ç–∑—ã–≤ #{review_id} —É–¥–∞–ª—ë–Ω.")
    await callback.answer("–û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω.", show_alert=True)

@router.callback_query(F.data.startswith("admin_reject_"))
async def reject_review(callback: CallbackQuery, bot: Bot):
    review_id = int(callback.data.split("_")[2])
    review = await db.get_review(review_id)
    if not review:
        await callback.message.edit_text("–û—Ç–∑—ã–≤ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        await callback.answer()
        return
    await db.update_review_status(review_id, "rejected")
    if callback.message.content_type == "photo":
        await callback.message.edit_caption(f"‚ùå –û—Ç–∑—ã–≤ #{review_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    else:
        await callback.message.edit_text(f"‚ùå –û—Ç–∑—ã–≤ #{review_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    try:
        await bot.send_message(review['user_id'], "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {review['user_id']}: {e}")
    await callback.answer()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def show_users_menu(message: Message, state: FSMContext):
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –±—ã–ª –≤ –¥—Ä—É–≥–æ–º –º–µ–Ω—é
    await display_users_page(message)

async def display_users_page(message_or_callback, page=1, search_query=None):
    users, total = await db.get_all_users(page=page, limit=5, search_query=search_query)
    
    if not users:
        text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        if search_query:
            text += f"\n–ü–æ –∑–∞–ø—Ä–æ—Å—É: `{search_query}`"
        await message_or_callback.answer(text)
        return

    text = f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):\n\n"
    
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"@{user['username'] or user['first_name']}", callback_data=f"user_details_{user['user_id']}")] for user in users
        ]
    )
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"users_page_{page-1}_{search_query or ''}"))
    if total > page * 5:
        pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"users_page_{page+1}_{search_query or ''}"))
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
    search_button = InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search_user")
    
    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = inline_kb.inline_keyboard
    if pagination_buttons:
        keyboard.append(pagination_buttons)
    keyboard.append([search_button])
    
    final_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, reply_markup=final_markup)
    else: # CallbackQuery
        await message_or_callback.message.edit_text(text, reply_markup=final_markup)

@router.callback_query(F.data.startswith("users_page_"))
async def paginate_users(callback: CallbackQuery):
    parts = callback.data.split("_")
    page = int(parts[2])
    search_query = parts[3] if len(parts) > 3 and parts[3] else None
    await display_users_page(callback, page=page, search_query=search_query)
    await callback.answer()

@router.callback_query(F.data == "search_user")
async def search_user_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminState.user_search_query)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ username –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await callback.answer()

@router.message(AdminState.user_search_query)
async def process_user_search(message: Message, state: FSMContext):
    await state.clear()
    await display_users_page(message, page=1, search_query=message.text)

@router.callback_query(F.data.startswith("user_details_"))
async def user_details(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[2])
    await state.update_data(target_user_id=user_id)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="write_to_user")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_users_list")]
    ])
    await callback.message.edit_text(f"–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "back_to_users_list")
async def back_to_users(callback: CallbackQuery):
    await display_users_page(callback, page=1)
    await callback.answer()

@router.callback_query(F.data == "write_to_user")
async def write_to_user_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminState.message_to_user_text)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await callback.answer()

@router.message(AdminState.message_to_user_text)
async def send_message_to_user(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    user_id = data.get("target_user_id")
    await state.clear()
    
    try:
        await bot.send_message(user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await show_users_menu(message, state)

# --- –†–∞—Å—Å—ã–ª–∫–∞ ---
@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def mailing_start(message: Message, state: FSMContext):
    await state.set_state(AdminState.mailing_message)
    
    templates = await db.get_all_templates()
    kb_list = [[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]]
    if templates:
        kb_list.insert(0, [KeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω")])
        
    kb = ReplyKeyboardMarkup(keyboard=kb_list, resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.", reply_markup=kb)

@router.message(F.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", AdminState.mailing_message)
async def use_template_for_mailing(message: Message, state: FSMContext):
    templates = await db.get_all_templates()
    if not templates:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.")
        return
    
    buttons = [InlineKeyboardButton(text=t['name'], callback_data=f"use_template_{t['name']}") for t in templates]
    kb = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:", reply_markup=kb)

@router.callback_query(F.data.startswith("use_template_"), AdminState.mailing_message)
async def apply_template_for_mailing(callback: CallbackQuery, state: FSMContext):
    template_name = callback.data.split("_")[2]
    template = await db.get_template(template_name)
    if template:
        await state.update_data(mailing_message=template['text'])
        await state.set_state(AdminState.mailing_confirmation)
        await callback.message.edit_text(f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{template['text']}\n\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?",
                                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                            [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_mailing")],
                                            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_mailing")]
                                        ]))
    else:
        await callback.message.edit_text("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()


@router.message(AdminState.mailing_message)
async def mailing_message_received(message: Message, state: FSMContext):
    await state.update_data(mailing_message=message.text)
    await state.set_state(AdminState.mailing_confirmation)
    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{message.text}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                             [InlineKeyboardButton(text="‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_mailing")],
                             [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="retry_mailing")]
                         ]))

@router.callback_query(F.data == "retry_mailing", AdminState.mailing_confirmation)
async def mailing_retry(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminState.mailing_message)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await callback.answer()

@router.callback_query(F.data == "confirm_mailing", AdminState.mailing_confirmation)
async def mailing_confirm(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    text = data.get("mailing_message")
    await state.clear()
    
    user_ids = await db.get_all_user_ids()
    
    await callback.message.edit_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}")
    
    sent_count = 0
    failed_count = 0
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, text)
            sent_count += 1
            await asyncio.sleep(0.1) # –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        except Exception:
            failed_count += 1
            
    await callback.message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}")
    await admin_panel(callback.message) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

@router.callback_query(F.data == "cancel_mailing", AdminState.mailing_confirmation)
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞", AdminState.mailing_message)
async def mailing_cancel(message_or_callback: Message | CallbackQuery, state: FSMContext):
    await state.clear()
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await admin_panel(message_or_callback)
    else: # CallbackQuery
        await message_or_callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await admin_panel(message_or_callback.message)


# --- –®–∞–±–ª–æ–Ω—ã ---
@router.message(F.text == "üìù –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π")
async def templates_menu(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω", callback_data="create_template")],
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —à–∞–±–ª–æ–Ω—ã", callback_data="view_templates")]
    ])
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏:", reply_markup=kb)

@router.callback_query(F.data == "create_template")
async def create_template_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminState.template_name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ`):")
    await callback.answer()

@router.message(AdminState.template_name)
async def template_name_received(message: Message, state: FSMContext):
    await state.update_data(template_name=message.text)
    await state.set_state(AdminState.template_text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:")

@router.message(AdminState.template_text)
async def template_text_received(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("template_name")
    text = message.text
    
    await db.add_template(name, text)
    await state.clear()
    await message.answer(f"‚úÖ –®–∞–±–ª–æ–Ω '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    await templates_menu(message)

@router.callback_query(F.data == "view_templates")
async def view_templates_list(callback: CallbackQuery):
    templates = await db.get_all_templates()
    if not templates:
        await callback.message.edit_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_templates_menu")]]))
        await callback.answer()
        return

    buttons = [InlineKeyboardButton(text=t['name'], callback_data=f"view_template_detail_{t['name']}") for t in templates]
    buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_templates_menu"))
    kb = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await callback.message.edit_text("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "back_to_templates_menu")
async def back_to_templates_menu(callback: CallbackQuery):
    # –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤
    await templates_menu(callback.message)
    await callback.answer()

@router.callback_query(F.data.startswith("view_template_detail_"))
async def view_template_detail(callback: CallbackQuery):
    name = callback.data.split("_")[3]
    template = await db.get_template(name)
    if template:
        await callback.message.edit_text(f"–®–∞–±–ª–æ–Ω: **{template['name']}**\n\n{template['text']}", parse_mode="Markdown")
    else:
        await callback.message.edit_text("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()
